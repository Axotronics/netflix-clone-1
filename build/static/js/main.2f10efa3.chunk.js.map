{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchdata","console","log","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","poster_path","backdrop_path","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchtopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f10efa3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css'\r\nimport movieTrailer from \"movie-trailer\"; \r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    useEffect(() => {\r\n        async function fetchdata() {\r\n            const request = await axios.get(fetchUrl);\r\n            \r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchdata();\r\n\r\n    }, [fetchUrl]);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('')\r\n        }\r\n        else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new  URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            }).catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    console.log(movies);\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>  {title} </h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                    key={movie.id}\r\n                    onClick = { () => handleClick(movie)}\r\n                    \r\n                    className={`\"row__poster\" ${isLargeRow && \"row__posterLarge\"}`}\r\n                    className=\"row__poster\"\r\n                    src={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n                </div>\r\n                { trailerUrl &&  <YouTube videoId={trailerUrl} opts={opts} /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"b170a757b739881417a0235a41118cb9\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchtopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/tv?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:  `/discover/tv?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:  `/discover/tv?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:  `/discover/tv?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:  `/discover/tv?api_key=${API_KEY}&with_genres=99`\r\n    \r\n\r\n};\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length) - 1]);\r\n            return request;\r\n\r\n\r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n    console.log(movie);\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\",\r\n\r\n        }}> \r\n\r\n\r\n        <div className=\"banner\"> \r\n            <div className=\"bammer__contents\"> \r\n            <h1> {movie?.title || movie?.name || movie?.original_name}  </h1>\r\n            </div>\r\n            <h1 className=\"banner__description\"> \r\n            { truncate(movie?.overview, 150)}\r\n            \r\n            </h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\"> My List </button>\r\n                <button className=\"banner__button\"> Play </button>\r\n                 </div>\r\n                \r\n                \r\n             \r\n                 </div> </header>   \r\n\r\n\r\n\r\n            \r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useEffect, useState} from 'react'\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\" , () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        };\r\n\r\n\r\n    }, []);\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n            className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/NewNetflixLogo.png\"\r\n            alt=\"Netflix Logo\"\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nfunction App() {\n  return (\n    \n\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n    \n      \n      \n      <Row \n      isLargeRow={true}\n      title=\"NETFLIX ORIGINALS\"  fetchUrl={requests.fetchNetflixOriginals}/>\n      <Row  title=\"Top Rated\" fetchUrl={requests.fetchtopRated}/>\n      <Row  title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row  title=\"Horror\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row  title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      <Row  title=\"Trending\" fetchUrl={requests.fetchTrending}/>\n      <Row  title=\"Comedy\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row  title=\"Action\" fetchUrl={requests.fetchActionMovies}/>\n      \n      \n\n\n       \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}